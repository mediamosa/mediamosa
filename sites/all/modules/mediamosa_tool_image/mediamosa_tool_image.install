<?php
 /**
  * @file
  * Image tool installer.
  */

/**
 * Implements hook_install().
 */
function mediamosa_tool_image_install() {

  // Tool parameters.
  $default_params = array(
    array('image', 'quality', '-quality', NULL, NULL, NULL, '', 'FALSE', t('Quality is 0 (lowest image quality and highest compression) to 100 (best quality but least effective compression). The default quality is 75. See man convert for more information.')),
    array('image', 'resize', '-resize', NULL, NULL, NULL, '', 'FALSE', t('Resize an image ({width}x{height}). Default the size of the original. See man convert for more information.')),
  );

  // Insert default mappings as nodes.
  foreach ($default_params as $default_param) {
    $node = mediamosa_node::create_basic_node(mediamosa_node::MEDIAMOSA_NODE_TYPE_TOOL_PARAMS, $default_param[1]);

    $node->{mediamosa_tool_params_db::TOOL} = $default_param[0];
    $node->{mediamosa_tool_params_db::NICE_PARAMETER} = $default_param[1];
    $node->{mediamosa_tool_params_db::TOOL_PARAMETER} = $default_param[2];
    $node->{mediamosa_tool_params_db::MIN_VALUE} = $default_param[3];
    $node->{mediamosa_tool_params_db::MAX_VALUE} = $default_param[4];
    $node->{mediamosa_tool_params_db::ALLOWED_VALUE} = $default_param[5];
    $node->{mediamosa_tool_params_db::DEFAULT_VALUE} = $default_param[6];
    $node->{mediamosa_tool_params_db::REQUIRED} = $default_param[7];
    $node->{mediamosa_tool_params_db::DESCRIPTION} = $default_param[8];

    $node = node_save($node);
  }

  // Transcode profile.
  $default_profiles = array(
    array('convert image', 'FALSE', 'image', 'jpg', ''),
    array('high quality image', 'FALSE', 'image', 'jpg', 'quality:80;resize:2000x2000\>;'),
  );

  foreach ($default_profiles as $default_profile) {
    $node = mediamosa_node::create_basic_node(mediamosa_node::MEDIAMOSA_NODE_TYPE_TRANSCODE_PROFILE, $default_profile[0]);

    $node->{mediamosa_transcode_profile_db::APP_ID} = 0;
    $node->{mediamosa_transcode_profile_db::VERSION} = 0;
    $node->{mediamosa_transcode_profile_db::PROFILE} = $default_profile[0];
    $node->{mediamosa_transcode_profile_db::IS_DEFAULT_PROFILE} = $default_profile[1];
    $node->{mediamosa_transcode_profile_db::TOOL} = $default_profile[2];
    $node->{mediamosa_transcode_profile_db::FILE_EXTENSION} = $default_profile[3];
    $node->{mediamosa_transcode_profile_db::COMMAND} = $default_profile[4];

    $node = node_save($node);
  }

  // Tool mapping.

  // dc = 1, qdc = 2.
  $dc = mediamosa_asset_metadata_property_group::property_group_row_get_with_name('dublin_core');
  $mapping_array = array(
    array('copyright'        , 'rights', $dc[mediamosa_asset_metadata_property_group_db::ID]),
    array('exif comment'     , 'description', $dc[mediamosa_asset_metadata_property_group_db::ID]),
  );

  // Insert default mappings as nodes.
  foreach ($mapping_array as $mapping) {
    if ($mapping[1] && $mapping[2] && is_numeric($mapping[2]) && $mapping[2] > 0) {
      $prop = mediamosa_asset_metadata_property::property_get_row_with_name($mapping[1], $mapping[2]);
      if ($prop) {
        $prop_id = $prop[mediamosa_asset_metadata_property_db::ID];

        $node = mediamosa_node::create_basic_node(mediamosa_node::MEDIAMOSA_NODE_TYPE_TOOL_MAPPING, $mapping[0]);

        $node->{mediamosa_tool_mapping_db::TOOL} = mediamosa_tool_image::NAME;
        $node->{mediamosa_tool_mapping_db::PARAMETER} = $mapping[0];
        $node->{mediamosa_tool_mapping_db::PROP_ID} = $prop_id;

        $node = node_save($node);
      }
    }
  }
}

/**
 * Implements hook_unstall().
 */
function mediamosa_tool_image_uninstall() {

  $query = new EntityFieldQuery();
  $entities = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type',
      array(
        mediamosa_node::MEDIAMOSA_NODE_TYPE_TRANSCODE_PROFILE,
        mediamosa_node::MEDIAMOSA_NODE_TYPE_TOOL_MAPPING,
        mediamosa_node::MEDIAMOSA_NODE_TYPE_TOOL_PARAMS,
      ), 'IN')
    ->execute();
  $nodes = node_load_multiple(array_keys($entities['node']));

  // Can't add tool=image to FieldQuery, so do it here.
  foreach ($nodes as $node) {
    if ($node->tool == 'image') {
      $nodes_to_delete[] = $node->nid;
    }
  }
  node_delete_multiple($nodes_to_delete);
}
