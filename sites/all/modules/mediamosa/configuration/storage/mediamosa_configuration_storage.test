<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2012 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * MediaMosa Storage / SAN/NAS unittests.
 *
 * Based on tickets mediamosa 1:
 *
 * ticket_615
 *
 *
 */

/**
  * @file
  * Unittests for Conf. storage module.
  */
class MediaMosaConfigurationStorageTestCase extends MediaMosaTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Storage - basic SAN/NAS tests',
      'description' => 'Test the storage class paths for SAN/NAS.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_STORAGE,
      mediamosa_settings::MEDIAMOSA_RUN => mediamosa_settings::MEDIAMOSA_RUN_15_MINUTES,
    );
  }

  function setUp() {

    parent::setUp('mediamosa_configuration_storage');

    // Create and login user
    $rest_user = $this->drupalCreateUser(array(mediamosa_permission::ADMIN_MEDIAMOSA));
    $this->drupalLogin($rest_user);
  }

  function testTicket615() {
    $uuid = mediamosa_db::uuid(1);

    $a_locations = array(
      mediamosa_configuration_storage::data_location_get() => FALSE,
      mediamosa_configuration_storage::still_location_get() => FALSE,
      mediamosa_configuration_storage::ticket_play_location_get() => TRUE,
      mediamosa_configuration_storage::ticket_download_location_get() => TRUE,
      mediamosa_configuration_storage::ticket_still_location_get() => TRUE,
      mediamosa_configuration_storage::transcode_tmp_location_get() => FALSE,
    );

    foreach ($a_locations as $location => $with_mount) {
      if (!$with_mount) {
        $location = mediamosa_configuration_storage::mount_point_get() . DIRECTORY_SEPARATOR . $location;
      }

      // Create location first.
      $this->mkdir($location);

      $location .= DIRECTORY_SEPARATOR . $uuid;
      $this->assertTrue(mediamosa_io::touch($location), t('Check if @location can be created by MediaMosa.', array('@location' => $location)));
      $this->assertTrue(mediamosa_io::unlink($location), t('Check if @location can be deleted by MediaMosa.', array('@location' => $location)));
    }
  }
}
