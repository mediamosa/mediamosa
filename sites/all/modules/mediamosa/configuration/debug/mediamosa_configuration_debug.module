<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2011 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

 /**
  * @file
  * Debug settings module.
  */

/**
 * Implements hook_mediamosa_settings_collect().
 */
function mediamosa_configuration_debug_mediamosa_configuration_collect() {
  $form['settings_debug'] = array(
    '#type' => 'fieldset',
    '#title' => t('Debug settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  // Debug level.

  $form['settings_debug']['mediamosa_debug_level'] = array(
    '#type' => 'select',
    '#title' => t('Debug level.'),
    '#description' => t('Enable debugging by increasing its level. The higher the level, the more information is stored in log.'),
    '#required' => FALSE,
    '#options' => array(
      0 => t('Off'),
      1 => t('Low (debug info in output header)'),
      5 => t('Normal (low + normal debug logging)'),
      10 => t('High (Normal + high debug logging)'),
    ),
    '#default_value' => variable_get('mediamosa_debug_level', 0),// Set empty, so its filled.
  );

  // REST logging.

  $form['settings_debug']['rest_logging'] = array(
    '#type' => 'fieldset',
    '#title' => t('REST logging'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['settings_debug']['rest_logging']['mediamosa_watchdog_rest'] = array(
    '#type' => 'checkbox',
    '#title' => t('Turn on REST logging.'),
    '#description' => t('Set this flag to enable logging of all REST calls into the database.'),
    '#default_value' => mediamosa::is_log_rest(),
  );

  $form['settings_debug']['rest_logging']['mediamosa_watchdog_rest_app_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Application id.'),
    '#description' => t('Only enable rest logging for a specific application id.'),
    '#default_value' => mediamosa::get_log_rest_app_id(),
  );

  $form['settings_debug']['rest_logging']['mediamosa_watchdog_rest_ip_address'] = array(
    '#type' => 'textfield',
    '#title' => t('IP address.'),
    '#description' => t('Only enable rest logging for a specific IP.'),
    '#default_value' => mediamosa::get_log_rest_ip_address(),
  );

  // Debug IP whitelist.

  $form['settings_debug']['mediamosa_debug_ip_whitelist'] = array(
    '#type' => 'textfield',
    '#title' => t('Whitelisting of IPs for REST.'),
    '#description' => t('Set one or more IPs for enabling authorization simulation on REST. This allows you to do queries on the REST interface with own app_id parameter without needing to indentify yourself. Should not be used actively on production, only for testing and debugging purposes. You can add more than one IP by separating with a |. You current IP number is; %ip_client.', array('%ip_client' => $_SERVER['REMOTE_ADDR'])),
    '#required' => FALSE,
    '#default_value' => variable_get('mediamosa_debug_ip_whitelist', ''),
  );

  return $form;
}

/**
 * Implements hook_mediamosa_configuration_validate().
 */
function mediamosa_configuration_debug_mediamosa_configuration_validate($form, $form_state) {

  if (strpos($form_state['values']['mediamosa_debug_ip_whitelist'], ' ') !== FALSE) {
    form_set_error('mediamosa_debug_ip_whitelist', t('You can not enter any spaces.'));
  }

  // Validate the application id.
  if ($form_state['values']['mediamosa_watchdog_rest_app_id'] && !preg_match('/^([0-9]*)$/', $form_state['values']['mediamosa_watchdog_rest_app_id'])) {
    form_set_error('mediamosa_watchdog_rest_app_id', t('Application id should be integer.'));
  }

  // Validate the IP address.
  if ($form_state['values']['mediamosa_watchdog_rest_ip_address'] && !mediamosa_lib::is_valid_ip_address($form_state['values']['mediamosa_watchdog_rest_ip_address'])) {
    form_set_error('mediamosa_watchdog_rest_ip_address', t('IP address should be a real IP, like 127.0.0.1.'));
  }
}
