<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2011 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 */

// SESSIONs.
define('MEDIAMOSA_MAINTENACE_BROWSE_ASSETS_SESSION', 'mediamosa_maintenance_browse_assets_session');
define('MEDIAMOSA_MAINTENACE_BROWSE_COLLECTIONS_SESSION', 'mediamosa_maintenance_browse_collections_session');

// Include my files.
module_load_include('inc', 'mediamosa_maintenance_browse', 'mediamosa_maintenance_browse');

/**
 * Implements hook_theme().
 */
function mediamosa_maintenance_browse_theme() {
  return array(
    'mediamosa_maintenance_browse_revision_info' => array(
      'variables' => array(
        'node' => NULL,
        'user' => NULL,
      ),
      'file' => 'mediamosa_maintenance_browse_revision.inc',
    ),
    'restcall_doc' => array(
      'variables' => array(
        'rest_call' => NULL,
        'var_setup' => NULL,
        'warnings' => NULL,
      ),
      'template' => 'restcall-doc',
      'file' => 'mediamosa_maintenance_browse_restcalls.inc',
    ),
    'mediamosa_maintenance_browse_properties' => array(
      'variables' => array(
        'properties' => array(),
        'description' => NULL,
        'collection_assets' => array(),
      ),
      'file' => 'mediamosa_maintenance_browse.inc',
    ),
    'mediamosa_simpletest_test_table' => array(
      'render element' => 'table',
      'file' => 'mediamosa_maintenance_browse_simpletest.inc',
    ),
    'mediamosa_browse_job_failures' => array(
      'render element' => 'table',
      'file' => 'mediamosa_maintenance_browse_job_failures.inc',
    ),
    'mediamosa_browse_transcode_length_deviation' => array(
      'render element' => 'table',
      'file' => 'mediamosa_maintenance_browse_transcode_length_deviation.inc',
    ),
  );
}

/**
 * Implements hook_help().
 */
function mediamosa_maintenance_browse_help($path, $arg) {
  global $base_url;

  switch ($path) {
    case 'admin/mediamosa/browse':
      return '<p>' . t('The browse section allows you to browse the MediaMosa database.') . '</p>';
    case 'admin/mediamosa/browse/log':
      return '<p>' . t('The MediaMosa log is a list of recorded events containing usage data, performance data, errors, warnings and operational information. Besides checking the MediaMosa status page, it\'s also vital to check the MediaMosa report on a regular basis.') . '</p>';
    case 'admin/mediamosa/browse/restcall':
      return '<p>' . t('The REST call browser allows you to view all REST calls and their properties. Use the filter form to filter your results. Status value indicates if the REST call is activated, deprecated or disabled. Disabled REST calls can not be used. Deprecated REST calls will be disabled in future releases. Interface allows where the REST call can be used. Upload REST calls will have the upload interface defined, allowing them to be used on the upload server (see !mediamosa_servers). The same for REST call defined with download interface. These can be used on download servers. App interface must be the closed REST interface and is not specified by the !mediamosa_servers listing. The OpenAPI REST calls are allowed on the OpenAPI REST interface and should be public, as these REST calls do not require client application authentication.', array('!mediamosa_servers' => l('MediaMosa Servers', 'admin/mediamosa/config/server'))) . '</p>';
    case 'admin/mediamosa/browse/revision':
      return '<p>' . t('The revision log is a list of changes made on the configuration of MediaMosa. You can view changes made on transcode profiles, client applications, servers and global settings.') . '</p>';
    case 'admin/mediamosa/browse/errorcode':
      return '<p>' . t('This list show the translation of a MediaMosa error name and code to error message. MediaMosa error name and code can not be changed.') . '</p>';
    case 'admin/mediamosa/browse/testing':
      return '<p>' . t('Run our MediaMosa tests against MediaMosa core and MediaMosa modules. These tests help assure that MediaMosa is working as designed.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function mediamosa_maintenance_browse_menu() {
  $items = array();

  $items['admin/mediamosa/browse/asset'] = array(
    'title' => 'Asset browser',
    'description' => 'View assets currently in our database.',
    'page callback' => '_mediamosa_browse_asset_page',
    'page arguments' => array('list'),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_ASSETS),
    'file' => 'mediamosa_maintenance_browse_asset.inc',
  );

  $items['admin/mediamosa/browse/asset/list'] = array(
    'title' => 'Asset browser',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_LIST,
  );
  $items['admin/mediamosa/browse/asset/%'] = array(
    'title' => 'Asset details',
    'type' => MENU_CALLBACK,
    'page callback' => '_mediamosa_browse_asset_page_view',
    'page arguments' => array(4),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_ASSETS),
    'file' => 'mediamosa_maintenance_browse_asset.inc',
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_VIEW,
  );
  $items['admin/mediamosa/browse/asset/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_VIEW,
  );
  $items['admin/mediamosa/browse/asset/%/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit asset.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_browse_asset_form', 4),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_ASSETS),
    'file' => 'mediamosa_maintenance_browse_asset.inc',
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_EDIT,
  );
  $items['admin/mediamosa/browse/asset/%/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete asset.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_browse_asset_delete_confirm_form', 4),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_ASSETS),
    'file' => 'mediamosa_maintenance_browse_asset.inc',
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_DELETE,
  );

  $items['admin/mediamosa/browse/collection'] = array(
    'title' => 'Collection browser',
    'description' => 'View collections currently in our database.',
    'page callback' => '_mediamosa_browse_collection_page',
    'page arguments' => array('list'),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_COLLECTIONS),
    'file' => 'mediamosa_maintenance_browse_collection.inc',
  );
  $items['admin/mediamosa/browse/collection/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_LIST,
  );
  $items['admin/mediamosa/browse/collection/%'] = array(
    'title' => 'Collection details',
    'type' => MENU_CALLBACK,
    'page callback' => '_mediamosa_browse_collection_page_view',
    'page arguments' => array(4),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_COLLECTIONS),
    'file' => 'mediamosa_maintenance_browse_collection.inc',
  );
  $items['admin/mediamosa/browse/collection/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_VIEW,
  );
  $items['admin/mediamosa/browse/collection/%/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit collection.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_browse_collection_form', 4),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_COLLECTIONS),
    'file' => 'mediamosa_maintenance_browse_collection.inc',
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_EDIT,
  );
  $items['admin/mediamosa/browse/collection/%/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete collection.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_browse_collection_delete_confirm_form', 4),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_COLLECTIONS),
    'file' => 'mediamosa_maintenance_browse_collection.inc',
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_DELETE,
  );
  $items['admin/mediamosa/browse/collection/%/remove_asset/%'] = array(
    'title' => 'Delete collection',
    'description' => 'Delete collection.',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_browse_collection_remove_asset_confirm_form', 4, 6),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_COLLECTIONS),
    'file' => 'mediamosa_maintenance_browse_collection.inc',
  );
  $items['admin/mediamosa/browse/collection/add'] = array(
    'title' => 'Add',
    'description' => 'Add a new collection.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_browse_collection_form'),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_COLLECTIONS),
    'file' => 'mediamosa_maintenance_browse_collection.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_ADD,
  );

  $items['admin/mediamosa/browse/restcall'] = array(
    'title' => 'Rest calls browser',
    'description' => 'View and browse through the REST calls of MediaMosa.',
    'page callback' => '_mediamosa_maintenance_browse_restcall_page',
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_RESTCALLS),
    'file' => 'mediamosa_maintenance_browse_restcalls.inc',
  );
  $items['admin/mediamosa/browse/restcall/list'] = array(
    'title' => 'Rest calls browser',
    'access arguments' => array('access mediamosa restcalls'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/mediamosa/browse/restcall/%/%'] = array(
    'title' => 'Detail rest calls',
    'description' => 'View the details of a REST call.',
    'page callback' => 'mediamosa_maintenance_browse_restcall_details',
    'page arguments' => array(4, 5),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_RESTCALLS),
    'type' => MENU_CALLBACK,
    'file' => 'mediamosa_maintenance_browse_restcalls.inc',
  );

  $items['admin/mediamosa/browse/log'] = array(
    'title' => 'Log entries',
    'description' => 'The MediaMosa log is a list of recorded events containing usage data, performance data, errors, warnings and operational information. It is vital to check the MediaMosa report on a regular basis as it is often the only way to tell what is going on.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mediamosa_maintenance_browse_log_form'),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_LOG),
    'file' => 'mediamosa_maintenance_browse_log.inc',
  );
  $items['admin/mediamosa/browse/log/list'] = array(
    'title' => 'Log entries',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/mediamosa/browse/revision'] = array(
    'title' => 'Revisions',
    'description' => 'Browse through all revisions of MediaMosa servers, transcode profiles, settings and client applications.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_maintenance_browse_revision_form'),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_REVISIONS),
    'file' => 'mediamosa_maintenance_browse_revision.inc',
  );
  $items['admin/mediamosa/browse/revision/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/mediamosa/browse/revision/%/%'] = array(
    'title' => 'Revision',
    'page callback' => '_mediamosa_maintenance_view_revision',
    'page arguments' => array(4, 5),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_REVISIONS),
    'type' => MENU_CALLBACK,
    'file' => 'mediamosa_maintenance_browse_revision.inc',
  );
  $items['admin/mediamosa/browse/revision/%/%/view'] = array(
    'title' => 'View',
    'type' => MENU_CALLBACK,
    'weight' => -10,
    'file' => 'mediamosa_maintenance_browse_revision.inc',
  );

  $items['admin/mediamosa/browse/errorcode'] = array(
    'title' => 'Errorcode management',
    'description' => 'Browse through MediaMosa REST Error response codes.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_maintenance_browse_errorcode_form'),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_ERRORCODES),
    'file' => 'mediamosa_maintenance_browse_errorcode.inc',
  );
  $items['admin/mediamosa/browse/errorcode/list'] = array(
    'title' => 'List',
    'access arguments' => array('access mediamosa errorcodes'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/mediamosa/browse/errorcode/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_maintenance_browse_errorcode_edit_form', 4),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_ERRORCODES),
    'weight' => 0,
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'mediamosa_maintenance_browse_errorcode.inc',
  );

  $items['admin/mediamosa/browse/testing'] = array(
    'title' => 'Testing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_maintenance_browse_test_form'),
    'description' => 'Run our MediaMosa tests against MediaMosa core and MediaMosa modules. These tests help assure that MediaMosa is working as designed.',
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_TESTING),
    'file' => 'mediamosa_maintenance_browse_simpletest.inc',
  );
  $items['admin/mediamosa/browse/testing/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/mediamosa/browse/testing/results/%'] = array(
    'title' => 'Test result',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_maintenance_browse_simpletest_result_form', 5),
    'description' => 'View result of tests.',
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_TESTING),
    'type' => MENU_CALLBACK,
    'file' => 'mediamosa_maintenance_browse_simpletest.inc',
  );

  $items['admin/mediamosa/browse/js/collection/searchparameters'] = array(
    'page callback' => '_ajax_browse_collection_search_parameters',
    'delivery callback' => 'ajax_deliver',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'mediamosa_maintenance_browse_collection.inc',
  );

  $items['admin/mediamosa/browse/js/asset/searchparameters'] = array(
    'page callback' => '_ajax_browse_asset_search_parameters',
    'delivery callback' => 'ajax_deliver',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'mediamosa_maintenance_browse_asset.inc',
  );

  $items['admin/mediamosa/browse/failure'] = array(
    'title' => 'Failed jobs',
    'description' => 'View failed jobs.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_browse_job_failures_page'),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_JOB_FAILURE),
    'file' => 'mediamosa_maintenance_browse_job_failures.inc',
  );

  $items['admin/mediamosa/browse/transcode_length_deviation'] = array(
    'title' => 'Transcode length deviation',
    'description' => 'View transcodings that deviate in length from the original upload.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_browse_transcode_length_deviation_page'),
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_BROWSE_TRANSCODE_LENGTH_DEVIATION),
    'file' => 'mediamosa_maintenance_browse_transcode_length_deviation.inc',
  );

  return $items;
}
