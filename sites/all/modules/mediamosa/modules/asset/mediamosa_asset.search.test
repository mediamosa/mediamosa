<?php
/**
 * @file
 * Unittests for asset search empty assets.
 */

class MediaMosaAssetSearchEmptyTestCaseEga extends MediaMosaTestCaseEgaJob {

  // ---------------------------------------------------------------- Functions.
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Asset - search empty assets tests',
      'description' => 'Testing asset search empty asset flags.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_ASSET,
    );
  }

  // -------------------------------------------------------------------- Tests.
  /**
   * Testing asset mediafile delete, see: ticket 831.
   */
  public function testAssetSearchEmpty() {

    // Create 3 assets.
    $asset_ids = array(
      'asset_id_1' => $this->createAsset(),
      'asset_id_2' => $this->createAsset(),
      'asset_id_3' => $this->createAsset(),
    );

    // Create mediafile for the second.
    $parameters = array(
      // The state of the downloadable flag must not effect the is empty state.
      mediamosa_rest_call_create_mediafile::IS_DOWNLOADABLE => 'true',
    );
    $mediafile_id_2 = $this->createMediafile($asset_ids['asset_id_2'], $parameters);

    // Start checking hide empty assets.
    //
    // Search assets with hide_empty_asset = FALSE.
    //
    $parameters = array(
      mediamosa_rest_call_asset_search::HIDE_EMPTY_ASSETS => 'false',
    );
    $assets = $this->searchAsset(10, $parameters);

    // Check the result: we should give back all.
    $this->assertTrue(
      count($assets['items']['item']) == count($asset_ids),
      t('Response has the good amount of assets (@count).', array('@count' => count($asset_ids)))
    );
    foreach ($assets['items']['item'] as $asset) {
      $this->assertTrue(
        in_array($asset['asset_id'], $asset_ids),
        t('Response has the good asset_ids (@aid).', array('@aid' => $asset['asset_id']))
      );
    }

    // Search assets with hide_empty_asset = TRUE.
    //
    $parameters = array(
      mediamosa_rest_call_asset_search::HIDE_EMPTY_ASSETS => 'true',
    );
    $assets = $this->searchAsset(10, $parameters, array(mediamosa_error::ERRORCODE_EMPTY_RESULT));

    // Check the result: we should give back all.
    $this->assertTrue(
      count($assets['items']['item']) == 0,
      t('Response has the good amount of assets (0).')
    );

    // Create mediafile for the first.
    $parameters = array(
      // The state of the downloadable flag must not effect the is empty state.
      mediamosa_rest_call_create_mediafile::IS_DOWNLOADABLE => 'false',
    );
    $mediafile_id_1 = $this->createMediafile($asset_ids['asset_id_1'], $parameters);

    $parameters = array(
      mediamosa_rest_call_asset_search::HIDE_EMPTY_ASSETS => 'true',
    );
    $assets = $this->searchAsset(10, $parameters, array(mediamosa_error::ERRORCODE_EMPTY_RESULT));

    // Check the result: we should give back all.
    $this->assertTrue(
      count($assets['items']['item']) == 0,
      t('Response has the good amount of assets (@count).', array('@count' => count($asset_ids)))
    );

    // Now check the search parameters.
    $search_params = mediamosa_rest_call_asset_search::get_search_params();

    // Do search on every item.
    foreach ($search_params as $field => $type) {
      $parameters = array();
      switch ($type) {
        case mediamosa_sdk::TYPE_SEARCH_DATETIME:
          $parameters[$field] = '2010-01-01 00:00:00';
          break;

        case mediamosa_sdk::TYPE_SEARCH_INT:
          $parameters[$field] = '1234';
          break;

        default:
        case mediamosa_sdk::TYPE_SEARCH_STRING:
          $parameters[$field] = 'foo';
          break;
      }
      $assets = $this->searchAsset(10, $parameters, array(mediamosa_error::ERRORCODE_OKAY, mediamosa_error::ERRORCODE_EMPTY_RESULT));
    }

    // Now further check on empty asset.

    // Create upload file.
    $upload = $this->uploadTestFile();
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    // Create transcode job.
    $job_id = $this->createMediafileTranscode($mediafile_id);

    // Parse the queue.
    $this->doQueueCycleAll();

    // Search must find 1 asset.
    $parameters = array(
      mediamosa_rest_call_asset_search::HIDE_EMPTY_ASSETS => 'true',
    );
    $assets = $this->searchAsset(10, $parameters);

    // Check the result: we should give back all.
    $this->assertTrue(
      count($assets['items']['item']) == 1,
      t('Response has the good amount of assets (@count).', array('@count' => count($asset_ids)))
    );

    // Sure that is this asset?
    foreach ($assets['items']['item'] as $asset) {
      $this->assertTrue(
        $asset['asset_id'] == $asset_id,
        t('Response has the good asset_ids (@aid).', array('@aid' => $asset['asset_id']))
      );
    }
  }
}
