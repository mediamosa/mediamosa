<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2011 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
  * @file
  * Unittests for adding supplement.
  */
class MediaMosaAssetSupplementAddTestCaseEga extends MediaMosaTestCaseEga {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'Asset supplement - add tests',
      'description' => 'Testing asset supplement add related functions and rest calls.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_ASSET_SUPPLEMENT,
    );
  }

  // ------------------------------------------------------------------ Tests.

  // Test adding asset supplement, see: ticket 493.
  function testSuplementAdd() {

    //
    // Set up.
    //

    // Get content.
    $supplement = file_get_contents($this->getTestImage_BlobGif());

    // Create an asset.
    $asset_id = $this->createAsset();

    //
    // Create supplement.
    //

    // Create supplement.
    $supplement_id = $this->createAssetSupplement($asset_id);

    // Get the supplement.
    $supplements = $this->getAssetSupplement($asset_id);

    // Check the supplement.
    $this->assertTrue(
      count($supplements['items']['item']) == 1,
      t("Get one supplement.")
    );
    $this->assertTrue(
      $supplements['items']['item'][0]['supplement_id'] == $supplement_id,
      t("Post and get supplement id is the same.")
    );
    $this->assertTrue(
      $supplements['items']['item'][0]['supplement_base64'] === '',
      t("Supplement base64 is empty.")
    );

    //
    // Update the supplement.
    //

    // Update the supplement.
    $this->updateAssetSupplement($asset_id, $supplement_id, $supplement);

    // Get the supplement.
    $supplements = $this->getAssetSupplement($asset_id);

    // Check the supplement.
    $this->assertTrue(
      $supplements['items']['item'][0]['supplement_base64'] == base64_encode($supplement),
      t("Supplement base64 has the posted supplement.")
    );

    //
    // Update the supplement (save a supplement XML).
    //

    // Set up.
    $a_data = array(
      'supplement' => '<tag>test</tag>',
      'oai_prefix' => 'test_prefix',
      'oai_namespaceuri' => 'test_namespaceuri',
      'oai_schemalocation' => 'test_schemalocation',
    );

    // Update the supplement.
    $a_parameters = array(
      mediamosa_rest_call_asset_supplement_update::OAI_PREFIX => $a_data['oai_prefix'],
      mediamosa_rest_call_asset_supplement_update::OAI_NAMESPACEURI => $a_data['oai_namespaceuri'],
      mediamosa_rest_call_asset_supplement_update::OAI_SCHEMALOCATION => $a_data['oai_schemalocation'],
    );
    $this->updateAssetSupplement($asset_id, $supplement_id, $a_data['supplement'], $a_parameters);

    // Get the supplement.
    $supplements = $this->getAssetSupplement($asset_id);

    // Check the supplement.
    foreach ($a_data as $key => $value) {
      if ($key == 'supplement') {
        $this->assertTrue(
          $supplements['items']['item'][0]['supplement_base64'] == base64_encode($value),
          t("Response has the good value (key = @key).", array('@key' => $key))
        );
      }
      else {
        $this->assertTrue(
          $supplements['items']['item'][0][$key] == $value,
          t("Response has the good value (key = @key).", array('@key' => $key))
        );
      }
    }

    //
    // Update the supplement (save an invalid supplement XML).
    //

    // Set up.
    $a_data = array(
      'supplement' => '<tag>test</tags>',
      'oai_prefix' => 'test_prefix',
      'oai_namespaceuri' => 'test_namespaceuri',
      'oai_schemalocation' => 'test_schemalocation',
    );

    // Update the supplement.
    $a_parameters = array(
      mediamosa_rest_call_asset_supplement_update::OAI_PREFIX => $a_data['oai_prefix'],
      mediamosa_rest_call_asset_supplement_update::OAI_NAMESPACEURI => $a_data['oai_namespaceuri'],
      mediamosa_rest_call_asset_supplement_update::OAI_SCHEMALOCATION => $a_data['oai_schemalocation'],
    );
    $this->updateAssetSupplement($asset_id, $supplement_id, $a_data['supplement'], $a_parameters, 'Update on asset supplement', array(mediamosa_error::ERRORCODE_INVALID_SUPPLEMENT));

    //
    // Make empty supplement to reach the maximum supplement per asset error.
    //

    // Create an empty asset.
    $asset_id = $this->createAsset();

    // Create max number of supplements.
    for ($i = 0; $i < mediamosa_settings::MAX_SUPPLEMENT_PER_ASSET; $i++) {
      // Create supplement.
      $supplement_id = $this->createAssetSupplement($asset_id);
    }

    // Get the supplement.
    $supplements = $this->getAssetSupplement($asset_id);

    // Check the supplements.
    $this->assertTrue(
      ($cnt = count($supplements['items']['item'])) == mediamosa_settings::MAX_SUPPLEMENT_PER_ASSET,
      t("Asset has the max number of supplement (count = @count)", array('@count' => $cnt))
    );

    // Create supplement, over the quota.
    $supplement_id = $this->createAssetSupplement($asset_id, array(), array(mediamosa_error::ERRORCODE_SUPPLEMENT_LIMIT_REACHED));
  }
}
