<?php
/**
 * @file
 * Unittests for metadata property.
 */

class MediaMosaAssetMetadataPropertyTestCaseEga extends MediaMosaTestCaseEga {

  // ---------------------------------------------------------------- Functions.
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Asset - metadata property tests',
      'description' => 'Testing asset metadata property related functions and rest calls.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_ASSET,
    );
  }

  // -------------------------------------------------------------------- Tests.
  /**
   * Testing asset metadata property, see: ticket 669.
   */
  public function testMetadataPropery() {
    // --------------------------------- Create a new asset property definition.
    //
    // Property.
    $definition = mediamosa_db::uuid(mt_rand(1, 9999));
    // Can not start with number.
    $definition = 'testtag_' . drupal_substr($definition, 0, 10);

    // Type.
    $type = 'char';

    // Create the metadata definition.
    $response = $this->createAssetMetadataDefinition($definition, $type);
    $xml = mediamosa_lib::responsexml2array($response);

    // Check if the mediamosa_asset_metadata_property has the good values.
    // Name.
    $this->assertTrue(
      $xml['items']['item'][0]['prop_name'] == $definition,
      t('Sent and get property name is the same (@sent = @get).',
        array(
          '@sent' => $definition,
          '@get' => $xml['items']['item'][0]['prop_name'],
        )
      )
    );

    // Type.
    $type = mediamosa_unicode::strtoupper($type);
    $this->assertTrue(
      $xml['items']['item'][0]['type'] == $type,
      t('Sent and get property type is the same (@sent = @get).',
        array(
          '@sent' => $type,
          '@get' => $xml['items']['item'][0]['type'],
        )
      )
    );

    // -------------------------------------------- Create a new asset property.
    //
    // Create an asset.
    $asset_id = $this->createAsset();

    // Value.
    $value = mediamosa_db::uuid(mt_rand(1, 9999));

    // Create asset metadata.
    $parameters = array(
      $definition => $value,
    );
    $response = $this->createAssetMetadata($asset_id, $parameters);
    $xml = mediamosa_lib::responsexml2array($response);

    // Check the asset property values.
    $this->assertTrue(
      $xml['items']['item'][0][$definition] == $value,
      t('Sent and get property has the same value (@sent = @get).',
        array(
          '@sent' => $value,
          '@get' => $xml['items']['item'][0][$definition],
        )
      )
    );

    // ---------------- Delete asset property definition without delete=cascade.
    //
    // Delete the asset property without delete=cascade.
    $this->deleteAssetMetadataDefinition($definition, NULL, array(), array(mediamosa_error::ERRORCODE_METADATA_DEFINITION_NOT_EMPTY));

    // Check if the asset property still in the database.
    $parameters = array(
      'name' => $definition,
    );
    $response = $this->getMetadataDefinitions($parameters);

    // Check the asset property values.
    $this->assertTrue(
      $response['name'] == $definition,
      t('Sent and get property has the same value (@sent = @get).',
        array(
          '@sent' => $definition,
          '@get' => $response['name'],
        )
      )
    );

    // ------------------- Delete asset property definition with delete=cascade.
    //
    // Delete the asset property with delete=cascade.
    $this->deleteAssetMetadataDefinition($definition, 'cascade');

    // Check if the asset property still in the database.
    $parameters = array(
      'name' => $definition,
    );
    $response = $this->getMetadataDefinitions($parameters, array(mediamosa_error::ERRORCODE_EMPTY_RESULT));

    // Check the asset property values.
    $this->assertFalse(
      isset($response['name']),
      t("After we deleted the asset property we don't have 'name'.")
    );
  }
}
