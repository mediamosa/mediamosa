<?php
/**
 * @file
 * Unittests for assets.
 */

class MediaMosaAssetTestCaseEga extends MediaMosaTestCaseEga {

  // ---------------------------------------------------------------- Functions.
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Asset - common tests',
      'description' => 'Testing asset related functions and rest calls.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_ASSET,
    );
  }

  // ------------------------------------------------------------------ Tests.
  /**
   * Testing is_empty_asset issues, see: ticket 165.
   */
  public function testAssetIsEmptyAsset() {

    // Create asset.
    $asset_id = $this->createAsset();

    // Create mediafile.
    $mediafile_id = $this->createMediafile($asset_id);

    // Create uploadticket.
    $ticket = $this->createMediafileUploadTicket($mediafile_id);

    // Get the asset.
    $asset = $this->getAsset($asset_id);

    // Check is_empty_asset field is TRUE/
    $is_empty_asset = (string) $asset[mediamosa_asset_db::IS_EMPTY_ASSET];
    $this->assertTrue(
      $is_empty_asset == 'TRUE',
      t("The is_empty_asset parameter is TRUE: @is_empty_asset", array('@is_empty_asset' => print_r($is_empty_asset, TRUE)))
    );

    // Update mediafile.
    $a_parameters = array(
      mediamosa_rest_call_create_mediafile::URI => 'http://empty.asset.demo',
    );
    $this->updateMediafile($mediafile_id, $a_parameters);

    // Get the asset.
    $asset = $this->getAsset($asset_id);

    // Check is_empty_asset field is FALSE/
    $is_empty_asset = (string) $asset[mediamosa_asset_db::IS_EMPTY_ASSET];
    $this->assertTrue(
      $is_empty_asset == 'FALSE',
      t("The is_empty_asset parameter is FALSE: @is_empty_asset", array('@is_empty_asset' => print_r($is_empty_asset, TRUE)))
    );
  }

  /**
   * Testing is_empty_asset issue, see: ticket 167.
   */
  public function testAssetIsEmptyAsset2() {

    // Create an asset.
    $asset_id = $this->createAsset();

    // Create mediafile.
    $mediafile_id_empty = $this->createMediafile($asset_id);

    // Create uploadticket.
    $ticket = $this->createMediafileUploadTicket($mediafile_id_empty);

    // Get the asset/
    $asset = $this->getAsset($asset_id);

    // Check is_empty_asset field is TRUE.
    $is_empty_asset = (string) $asset[mediamosa_asset_db::IS_EMPTY_ASSET];
    $this->assertTrue(
      $is_empty_asset == 'TRUE',
      t("The is_empty_asset parameter is TRUE: @is_empty_asset", array('@is_empty_asset' => print_r($is_empty_asset, TRUE)))
    );

    // Create an another mediafile with an URI.
    $a_parameters = array(
      mediamosa_rest_call_create_mediafile::URI => 'http://empty.asset.demo',
    );
    $mediafile_id_with_uri = $this->createMediafile($asset_id, $a_parameters);

    // Get the asset.
    $asset = $this->getAsset($asset_id);

    // Check is_empty_asset field is FALSE.
    $is_empty_asset = (string) $asset[mediamosa_asset_db::IS_EMPTY_ASSET];
    $this->assertTrue(
      $is_empty_asset == 'FALSE',
      t("The is_empty_asset parameter is FALSE: @is_empty_asset", array('@is_empty_asset' => print_r($is_empty_asset, TRUE)))
    );
  }

  /**
   * Testing is_empty_asset issue, see: ticket 166.
   */
  public function testAssetIsEmptyAsset4() {

    // Create an asset with upload/
    $upload = $this->uploadTestFile();
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    // Get the asset.
    $asset = $this->getAsset($asset_id);

    // Check is_empty_asset field is TRUE.
    $is_empty_asset = (string) $asset[mediamosa_asset_db::IS_EMPTY_ASSET];
    $this->assertTrue(
      $is_empty_asset == 'FALSE',
      strtr("The is_empty_asset parameter is FALSE: @is_empty_asset", array('@is_empty_asset' => print_r($is_empty_asset, TRUE)))
    );

    // Create an another mediafile with an URI.
    $a_parameters = array(
      mediamosa_rest_call_create_mediafile::URI => 'http://empty.asset.demo',
    );
    $mediafile_id_with_uri = $this->createMediafile($asset_id, $a_parameters);

    // Get the asset.
    $asset = $this->getAsset($asset_id);

    // Check is_empty_asset field is FALSE.
    $is_empty_asset = (string) $asset[mediamosa_asset_db::IS_EMPTY_ASSET];
    $this->assertTrue(
      $is_empty_asset == 'FALSE',
      strtr("The is_empty_asset parameter is FALSE: @is_empty_asset", array('@is_empty_asset' => print_r($is_empty_asset, TRUE)))
    );

    // Now delete the upload, so is_empty_asset still false/
    self::deleteMediafile($mediafile_id);

    // Get the asset.
    $asset = $this->getAsset($asset_id);

    // Check is_empty_asset field is TRUE.
    $is_empty_asset = (string) $asset[mediamosa_asset_db::IS_EMPTY_ASSET];
    $this->assertTrue(
      $is_empty_asset == 'FALSE',
      strtr("The is_empty_asset parameter is FALSE: @is_empty_asset", array('@is_empty_asset' => print_r($is_empty_asset, TRUE)))
    );

    // Now delete the uri, so is_empty_asset = true.
    self::deleteMediafile($mediafile_id_with_uri);

    // Get the asset.
    $asset = $this->getAsset($asset_id);

    // Check is_empty_asset field is TRUE.
    $is_empty_asset = (string) $asset[mediamosa_asset_db::IS_EMPTY_ASSET];
    $this->assertTrue(
      $is_empty_asset == 'TRUE',
      strtr("The is_empty_asset parameter is TRUE: @is_empty_asset", array('@is_empty_asset' => print_r($is_empty_asset, TRUE)))
    );
  }

  /**
   * Testing is_empty_asset issue with CQL, see: ticket 180.
   */
  public function testAssetIsEmptyAsset3() {

    // Limit.
    $limit = 10;

    // Create assets.
    $asset_id = array();
    $asset_id[1] = $this->createAsset();
    $asset_id[2] = $this->createAsset();
    $asset_id[3] = $this->createAsset();
    $asset_id[4] = $this->createAsset();
    $asset_id[5] = $this->createAsset();

    // Create mediafiles.
    $mediafile_id = array();
    $a_parameters = array(
      mediamosa_rest_call_create_mediafile::URI => 'http://empty.asset.demo',
    );
    $mediafile_id[2][1] = $this->createMediafile($asset_id[2]);
    $mediafile_id[2][2] = $this->createMediafile($asset_id[2], $a_parameters);
    $mediafile_id[3][1] = $this->createMediafile($asset_id[3], $a_parameters);
    $mediafile_id[4][1] = $this->createMediafile($asset_id[4]);

    // Search without CQL.
    //
    // Search assets.
    $a_assets = $this->searchAsset($limit);

    // Check result.
    $this->assertTrue(
      count($a_assets['items']['item']) == 5,
      t("There are all the assets (5 = @get)", array('@get' => count($a_assets['items']['item'])))
    );

    // Search with is_empty_asset = TRUE.
    //
    // Search assets.
    $a_parameters = array(
      mediamosa_rest_call_asset_search::CQL => '((is_empty_asset==TRUE))',
    );
    $a_assets = $this->searchAsset($limit, $a_parameters);

    // Check result.
    $this->assertTrue(
      count($a_assets['items']['item']) == 3,
      t("There are all the assets (3 = @get)", array('@get' => count($a_assets['items']['item'])))
    );

    // Search with is_empty_asset = FALSE.
    //
    // Search assets.
    $a_parameters = array(
      mediamosa_rest_call_asset_search::CQL => '((is_empty_asset==FALSE))',
    );
    $a_assets = $this->searchAsset($limit, $a_parameters);

    // Check result.
    $this->assertTrue(
      count($a_assets['items']['item']) == 2,
      t("There are all the assets (2 = @get)", array('@get' => count($a_assets['items']['item'])))
    );
  }

  /**
   * Test if the view count is increased.
   */
  public function testAssetViewCount() {

    // Create a upload test file with asset and mediafile.
    $upload = $this->uploadTestFile();

    // Set the parameters.
    $parameters = array();

    // Get the asset and see if viewed is on 1.
    $uri = strtr('asset/@asset_id', array('@asset_id' => $upload['asset_id']));
    $response = $this->restCallGet($uri);

    $this->assertTrue($response['xml']->items->item[0]->played == 0, 'No play count.');
    $this->assertTrue($response['xml']->items->item[0]->viewed == 0, 'No view count.');

    // Get the asset and see if viewed is on 1.
    $uri = strtr('asset/@asset_id', array('@asset_id' => $upload['asset_id']));
    $response = $this->restCallGet($uri, $parameters);

    $this->assertTrue($response['xml']->items->item[0]->played == 0, 'No play count.');
    $this->assertTrue($response['xml']->items->item[0]->viewed == 1, 'Increased view count.');

    // Because of asset/ above, viewed is now 2.
    //
    // Turn view count off.
    $parameters['count_view'] = 'false';

    // Get asset.
    $response = $this->restCallGet($uri, $parameters);

    $this->assertTrue($response['xml']->items->item[0]->played == 0, 'No play count.');
    $this->assertTrue($response['xml']->items->item[0]->viewed == 2, 'View count == 2.');

    // Get asset.
    $response = $this->restCallGet($uri, $parameters);

    $this->assertTrue($response['xml']->items->item[0]->played == 0, 'No play count.');
    $this->assertTrue($response['xml']->items->item[0]->viewed == 2, 'View count == 2.');

    // Turn view count on.
    $parameters['count_view'] = 'true';

    // Get asset.
    $response = $this->restCallGet($uri, $parameters);

    $this->assertTrue($response['xml']->items->item[0]->played == 0, 'No play count.');
    $this->assertTrue($response['xml']->items->item[0]->viewed == 2, 'View count == 2.');

    // Get asset.
    $response = $this->restCallGet($uri, $parameters);

    $this->assertTrue($response['xml']->items->item[0]->played == 0, 'No play count.');
    $this->assertTrue($response['xml']->items->item[0]->viewed == 3, 'View count == 3.');
  }
}
