<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2011 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * Play proxy still unittests.
 *
 * Based on tickets mediamosa 1:
 * ticket_261
 */

class MediaMosaStillPlayProxyTestCaseEgaJob extends MediaMosaTestCaseEgaJob {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'PlayProxy - Stills',
      'description' => 'Play proxy calls on the stills.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_PLAYPROXY,
    );
  }

  // ------------------------------------------------------------------ Tests.
  public function testStillPlayProxy() {
    $app_id_1 = $this->a_app[mediamosa_app_db::APP_ID];
    $app_id_2 = $this->a_app_2[mediamosa_app_db::APP_ID];

    // Check if masterslaving does not generate stills.
    $this->toEga_1();
    $this->enableMasterSlave($app_id_2);

    $this->toEga_2();
    $this->enableMasterSlave($app_id_1);

    // Login in on other EGA.
    $this->doEgaLogin_2();
    $this->doEgaLogin_3(); // no assets.

    // Switch to app 1.
    $this->toEga_1();

    // Create upload file.
    $upload = $this->uploadTestFile();
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    // Parse the queue.
    $this->doQueueCycleAll();

    // Get the stills.
    $stills = $this->getAssetStill($asset_id, array(), array(mediamosa_error::ERRORCODE_STILL_NOT_FOUND));
    $this->var_export($stills);
    $this->assertTrue(empty($stills), 'No stills found.');

    // Create still job.
    $job_id = $this->createMediafileStill($mediafile_id);

    // Parse the queue.
    $this->doQueueCycleAll();

    // Get the stills.
    $stills = $this->getMediafileStill($mediafile_id);
    $this->assertTrue(count($stills) == 1, 'Found still.');

    // Get first array.
    $stills = $stills[0];

    // Still list.
    $a_still_list = $stills['stills'];

    $this->var_export($stills);

    // Some tests.
    $this->assertTrue(isset($stills['stills']), 'Found the still.');
    $this->assertTrue(!empty($stills['output']), 'Found the output url.');
    $this->assertTrue(!empty($stills['ticket_id']), 'Found the ticket ID.');

    // Test the output, do output call.
    $still_url = str_replace('/media/', '/media/simpletest/media/', $stills['output']);

    // Get the file.
    $result = mediamosa_http::drupal_http_request($still_url);

    // Check response.
    $this->assertTrue(
      $result->code == 200,
      t("Download the test image from '@url' (code = @code)", array('@url' => $still_url, '@code' => $result->code))
    );

    // Masterslave the mediafile.
    $this->setMediafileAcl($mediafile_id, array('acl_app' => $app_id_2));

    // Get the stills.
    $stills = $this->getAssetStill($asset_id);
    $this->assertTrue(count($stills) == 1, 'Found still.');

    $this->toEga_2();

    // Get the stills.
    $stills = $this->getAssetStill($asset_id, array(), array(mediamosa_error::ERRORCODE_STILL_NOT_FOUND));
    $this->var_export($stills);
    $this->assertTrue(empty($stills), 'No stills found.');

    $this->toEga_1();

    // Delete the mediafile.
    $this->deleteMediafile($mediafile_id);

    // Delete the asset.
    $this->deleteAsset($asset_id);

    // Create upload file.
    $upload = $this->uploadTestFile();
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    // Parse the queue.
    $this->doQueueCycleAll();

    // Get the stills.
    $stills = $this->getAssetStill($asset_id, array(), array(mediamosa_error::ERRORCODE_STILL_NOT_FOUND));
    $this->var_export($stills);
    $this->assertTrue(empty($stills), 'No stills found.');

    // Create transcode job.
    $job_id = $this->createMediafileTranscode($mediafile_id);

    // Parse the queue.
    $this->doQueueCycleAll();

    // Get the stills.
    $stills = $this->getAssetStill($asset_id, array(), array(mediamosa_error::ERRORCODE_STILL_NOT_FOUND));
    $this->var_export($stills);
    $this->assertTrue(empty($stills), 'No stills found.');

    // Get the asset.
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);

    // Delete mediafils.
    foreach ($asset['mediafiles'] as $mediafile) {
      if (isset($mediafile[0])) {
        foreach ($mediafile as $mediafile_child) {
           // Delete the mediafile.
          $this->deleteMediafile($mediafile_child['mediafile_id']);
        }
      }
      else {
         // Delete the mediafile.
        $this->deleteMediafile($mediafile['mediafile_id']);
      }
    }

    // Delete the asset.
    $this->deleteAsset($asset_id);

    // Create upload file.
    $upload = $this->uploadTestFile();
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    // Parse the queue.
    $this->doQueueCycleAll();

    // Masterslave the mediafile.
    $this->setMediafileAcl($mediafile_id, array('acl_app' => $app_id_2));

    // Get the stills.
    $stills = $this->getAssetStill($asset_id, array(), array(mediamosa_error::ERRORCODE_STILL_NOT_FOUND));
    $this->var_export($stills);
    $this->assertTrue(empty($stills), 'No stills found.');

    $this->toEga_2();

    // Get the stills.
    $stills = $this->getAssetStill($asset_id, array(), array(mediamosa_error::ERRORCODE_STILL_NOT_FOUND));
    $this->var_export($stills);
    $this->assertTrue(empty($stills), 'No stills found.');
  }
}
