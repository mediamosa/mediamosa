<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2011 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * Delete still unittests.
 *
 * Based on tickets mediamosa 1:
 * ticket_306
 */

class MediaMosaStillDeleteTestCaseEgaJob extends MediaMosaTestCaseEgaJob {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'Still - Stills delete',
      'description' => 'Delete calls on the stills.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_STILL,
    );
  }

  // ------------------------------------------------------------------ Tests.
  public function testStillDelete() {

    //
    // Set up Egas.
    //

    // App ids.
    $app_id_1 = $this->a_app[mediamosa_app_db::APP_ID];
    $app_id_2 = $this->a_app_2[mediamosa_app_db::APP_ID];
    $app_id_3 = $this->a_app_3[mediamosa_app_db::APP_ID];

    // Login in on other EGA.
    $this->doEgaLogin_2();
    $this->doEgaLogin_3();

    //
    // Set up still.
    //

    // Create upload file.
    $a_upload = $this->uploadTestFile();
    $asset_id = $a_upload['asset_id'];
    $mediafile_id = $a_upload['mediafile_id'];

    // Create still job.
    $job_id = $this->createMediafileStill($mediafile_id);

    // Parse the queue.
    $this->doQueueCycleAll();

    // Get the stills.
    $a_stills = $this->getMediafileStill($mediafile_id);

    // Check the output
    $this->assertTrue(count($a_stills) == 1, 'One dimension result.');

    // Get first array.
    $a_stills = $a_stills[0];

    // Still list.
    $a_still_list = $a_stills['stills'];

    //
    // Delete still.
    //

    // Delete still with an another user (with still_id).
    $a_parameters = array(
      mediamosa_rest_call_asset_supplement_update::USER_ID => 'santaclaus',
      mediamosa_rest_call_delete_stills::STILL_ID => $a_still_list['still_id'],
    );
    $response = $this->deleteStill($asset_id, $a_parameters, array(mediamosa_error::ERRORCODE_NOT_AUTHORIZED));

    // Delete still with an another user (without still_id).
    $a_parameters = array(
      mediamosa_rest_call_asset_supplement_update::USER_ID => 'santaclaus',
    );
    $response = $this->deleteStill($asset_id, $a_parameters, array(mediamosa_error::ERRORCODE_NOT_AUTHORIZED));

    // Delete still with an another Ega.
    // Switch Ega.
    $this->toEga_3();
    $a_parameters = array(
      mediamosa_rest_call_delete_stills::STILL_ID => $a_still_list['still_id'],
    );
    $response = $this->deleteStill($asset_id, $a_parameters, array(mediamosa_error::ERRORCODE_NOT_AUTHORIZED));
    // Switch Ega.
    $this->toEga_1();

    // Delete still.
    $response = $this->deleteStill($asset_id);
  }
}
