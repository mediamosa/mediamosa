<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2012 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * The black still check.
 */

class MediaMosaStillBlackStillTestCaseEgaJob extends MediaMosaTestCaseEgaJob {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'Still - Black-still detection',
      'description' => 'Test the black still detection.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_STILL,
    );
  }

  // ------------------------------------------------------------------ Tests.
  public function testBlackStill() {

    //
    // Set up Egas.
    //

    // App ids.
    $app_id_1 = $this->a_app[mediamosa_app_db::APP_ID];

    //
    // Set up still.
    //

    // Create upload file.
  //  $filename = drupal_get_path('module', 'mediamosa') . '/lib/testfiles/test.mov';
  //  $this->pass(t('Got test video for black still @video.', array('@video' => $filename)));
  //  $upload = $this->uploadTestFile($filename);

    $upload = $this->uploadTestFile($this->getTestVideo_BlackStill());
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    // Parameters taken from failure in vpcore ticket 199.
    $parameters = array(
      'still_type' => 'NONE',
    //  'still_per_mediafile'=> 0,
   //   'still_every_second' => 0,
   //   'start_frame' => 100,
    //  'end_frame' => 0,
    //  'tag' => '',
   //   'video_duration' => 692,
   //   'fps' => '25',
   //   'frametime' => 100,
   //   'duration' => 1,
   //   'framerate' => 1,
    );

    // Create still job (ticket vpcore #199).
    $job_id = $this->createMediafileStill($mediafile_id, $parameters);

    // Parse the queue.
    $this->doQueueCycleAll();

    // Get the stills.
    $stills = $this->getMediafileStill($mediafile_id);

    // Dump the still data.
    $this->var_export($stills);

    // Check the output
    $this->assertTrue(count($stills) == 1, 'One dimension result.');

    // Get first array.
    $stills = $stills[0];

    // Still list.
    $still_list = $stills['stills'];

    // Get the created still.
    $filename_still = mediamosa_configuration_storage::mediafile_still_filename_get($still_list['still_id']);

    // Check filename.
    $this->assertTrue($filename_still, strtr('Got generated still filename: @filename', array('@filename' => $filename_still)));
    $this->assertTrue(mediamosa_io::file_exists($filename_still, TRUE), t('Found the generated still.'));

    // Check the image
    $im = mediamosa_gd::imagecreatefromjpeg($filename_still);

    // Check generation.
    $this->assertTrue($im !== FALSE, 'Got image from still.');

    if ($im) {
      $pixel_rgb = mediamosa_gd::imagecolorat($im, 10, 10);
      $this->assertTrue($pixel_rgb > 0, 'Check the validated image pixel x10, y10; RGB 0x'. $pixel_rgb);

      $pixel_rgb = mediamosa_gd::imagecolorat($im, 20, 20);
      $this->assertTrue($pixel_rgb > 0, 'Check the validated image pixel x20, y20; RGB 0x'. $pixel_rgb);
    }

    // Delete still.
    $response = $this->deleteStill($asset_id);
  }
}
