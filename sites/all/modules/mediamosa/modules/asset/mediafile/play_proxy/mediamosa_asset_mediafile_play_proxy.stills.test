<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2011 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * Assets without still won't give back still links.
 *
 * Based on VPCore ticket #270.
 */
class MediaMosaPlayProxyStillsTestCaseEgaJob extends MediaMosaTestCaseEgaJob {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'Still - PlayProxy calls',
      'description' => 'Execute PlayProxy calls to receive stills.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_STILL,
    );
  }

  // ------------------------------------------------------------------ Tests.
  public function testPlayProxyStills() {

    //
    // Set up Egas.
    //

    // App ids.
    $app_id_1 = $this->a_app[mediamosa_app_db::APP_ID];
    $app_id_2 = $this->a_app_2[mediamosa_app_db::APP_ID];
    $app_id_3 = $this->a_app_3[mediamosa_app_db::APP_ID];

    // Enable change master/slave.
    $this->toEga_1();
    $this->enableMasterSlave($app_id_2);
    $this->enableMasterSlave($app_id_3);

    $this->toEga_2();
    $this->enableMasterSlave($app_id_1);
    $this->enableMasterSlave($app_id_3);

    $this->toEga_3();
    $this->enableMasterSlave($app_id_1);
    $this->enableMasterSlave($app_id_2);

    // Switch Ega.
    $this->toEga_1();

    // Login in on other EGA.
    $this->doEgaLogin_2();
    $this->doEgaLogin_3();

    //
    // Set up still.
    //

    // Create upload file.
    $upload = $this->uploadTestFile();
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    //
    // No stills.
    //

    // Expecting no stills.
    $this->getAssetStill($asset_id, array(), array(mediamosa_error::ERRORCODE_STILL_NOT_FOUND));


    // Switch Ega.
    $this->toEga_2();

    // Expecting no stills.
    $this->getAssetStill($asset_id, array(), array(mediamosa_error::ERRORCODE_STILL_NOT_FOUND));

    //
    // With stills.
    //

    // Switch Ega.
    $this->toEga_1();

    // Create still job.
    $job_id = $this->createMediafileStill($mediafile_id);

    // Parse the queue.
    $this->doQueueCycleAll();

    // Expecting one still.
    $stills = $this->getAssetStill($asset_id);

    // Check the output
    $this->assertTrue(count($stills) == 1, strtr('Expecting one still, found @count.', array('@count' => count($stills))));

    // Switch Ega.
    $this->toEga_2();

    // Expecting no stills.
    $this->getAssetStill($asset_id, array(), array(mediamosa_error::ERRORCODE_STILL_NOT_FOUND));
  }
}
