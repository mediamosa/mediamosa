<?php
/**
 * @file
 * The Application module.
 */

/**
 * Implements hook_mediamosa_register_rest_call_doc().
 */
function mediamosa_app_mediamosa_register_rest_call_doc() {
  $rest_calls = array();

  // Get profile_id setting.
  $rest_calls['transcode/profile/default'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'Get the preview profile ID.',
    mediamosa_rest_call::DESCRIPTION => 'Get the preview profile ID.',
    mediamosa_rest_call::EXAMPLE_REQUEST => 'preview_profile_id',
    mediamosa_rest_call::RESPONSE_FIELDS => array(),
    mediamosa_rest_call::EXAMPLE_RESPONSE => '<items>
  <item id="1">
    <preview_profile_id>1</preview_profile_id>
  </item>
</items>',
  );

  // Alias for deprecated call.
  $rest_calls['preview_profile_id'] = $rest_calls['transcode/profile/default'];

  // Get application quota.
  $rest_calls['app/quota'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'Get the application disk usage quota.',
    mediamosa_rest_call::DESCRIPTION => 'Get disk usage quota for current application.',
    mediamosa_rest_call::EXAMPLE_REQUEST => 'app/quota',
    mediamosa_rest_call::RESPONSE_FIELDS => array(
      'quota' => 'Disk quota in GB.',
    ),
    mediamosa_rest_call::EXAMPLE_RESPONSE => '<items>
  <item id="1">
    <app_quota_mb>153600</app_quota_mb>
    <app_diskspace_used_mb>2094</app_diskspace_used_mb>
    <quota_available_mb>151506</quota_available_mb>  </item>
</items>',
  );

  return $rest_calls;
}

/**
 * Implements hook_mediamosa_register_rest_call().
 */
function mediamosa_app_mediamosa_register_rest_call() {
  $rest_calls = array();

  // Get default transcoding profile.
  $rest_calls['transcode/profile/default'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_app_get_default_transcode_profile',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_app',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_3_0_0,
  );

  // Deprecated version of transcode/profile/default, see above.
  $rest_calls['preview_profile_id'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_app_get_default_transcode_profile',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_DEPRECATED,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_app',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_1_1_7,
  );

  // Return a quota for current app.
  $rest_calls['app/quota'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_app_get_quota',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_app',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_3_0_0,
  );

  return $rest_calls;
}

/**
 * Implements hook_help().
 */
function mediamosa_app_help($path, $arg) {

  switch ($path) {
    case 'admin/mediamosa/config/app':
      return '<p>' . t('List of client applications.') . '</p>';

    case 'admin/mediamosa/config/app/add':
      return '<p>' . t('Create client application by completing and submitting the form.') . '</p>';

    case 'admin/mediamosa/config/app/%/metadata/tag':
      return '<p>' . t('Every application can have its own metadata definitions, these are unique for the application. These metadata fields can also be set with the REST call /metadata_tag/') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function mediamosa_app_menu() {
  $items = array();

  $items['admin/mediamosa/config/app'] = array(
    'title' => 'Client applications',
    'description' => 'List all MediaMosa Client Applications.',
    'page callback' => '_mediamosa_app_list',
    'access callback' => mediamosa_permission::CALLBACK_USER_ACCESS,
    'access arguments' => array(mediamosa_permission::ACCESS_CONFIG_APPS),
    'file' => 'mediamosa_app.admin.inc',
  );

  $items['admin/mediamosa/config/app/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_LIST,
  );

  $items['admin/mediamosa/config/app/add'] = array(
    'title' => 'Add',
    'page callback' => 'node_add',
    'page arguments' => array(mediamosa_node::MEDIAMOSA_NODE_TYPE_APP),
    'access callback' => 'node_access',
    'access arguments' => array('create', mediamosa_node::MEDIAMOSA_NODE_TYPE_APP),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_ADD,
  );

  $items['admin/mediamosa/config/app/%node'] = array(
    'page callback' => 'node_page_view',
    'page arguments' => array(4),
    'access callback' => 'node_access',
    'access arguments' => array('view', 4),
    'type' => MENU_CALLBACK,
  );
  $items['admin/mediamosa/config/app/%node/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_VIEW,
  );

  $items['admin/mediamosa/config/app/%node/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'node_page_edit',
    'page arguments' => array(4),
    'access callback' => 'node_access',
    'access arguments' => array('update', 4),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_EDIT,
  );

  $items['admin/mediamosa/config/app/%node/metadata/tag'] = array(
    'title' => 'Metadata',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_app_metadata_tag_form', 4),
    'access callback' => 'node_access',
    'access arguments' => array('update', 4),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'mediamosa_node_mediamosa_app.class.inc',
    'file path' => drupal_get_path('module', 'mediamosa') . '/core/node',
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_EDIT + 1,
  );

  $items['admin/mediamosa/config/app/%node/metadata/tag/%/delete'] = array(
    'title' => 'Metadata',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_app_metadata_tag_form_delete_confirm', 4, 7),
    'access callback' => 'node_access',
    'access arguments' => array('update', 4),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mediamosa_node_mediamosa_app.class.inc',
    'file path' => drupal_get_path('module', 'mediamosa') . '/core/node',
  );

  $items['admin/mediamosa/config/app/%node/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mediamosa_node_delete_confirm', 4),
    'access callback' => 'node_access',
    'access arguments' => array('delete', 4),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_DELETE,
  );

  $items['admin/mediamosa/config/app/%node/revisions'] = array(
    'title' => 'Revisions',
    'page callback' => '_mediamosa_node_revision_overview',
    'page arguments' => array(4),
    'access callback' => '_node_revision_access',
    'access arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_REVISIONS,
  );

  $items['admin/mediamosa/config/app/js/form'] = array(
    'page callback' => '_mediamosa_app_ajax_generate_shared_key',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/mediamosa/config/app/%node/metadata_tag/%/delete'] = array(
    'page callback' => '_mediamosa_app_form_metadata_delete',
    'access callback' => TRUE,
    'page arguments' => array(4, 6),
    'access callback' => 'node_access',
    'access arguments' => array('update', 4),
    'type' => MENU_CALLBACK,
  );

  return $items;
}
