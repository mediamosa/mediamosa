<?php
/**
 * @file
 * MediaMosa mountpoint storage.
 */

/**
 * Implements hook_stream_wrappers().
 */
function mediamosa_storage_mountpoint_stream_wrappers() {

  // Our MediaMosa S3 Stream Wrappers.
  $wrappers = array(
    'mediamosa-storage-mountpoint' => array(
      'name' => t('MediaMosa storage custom mount point location'),
      'class' => 'mediamosa_storage_mountpoint_streamwrapper',
      'description' => t('The custom local storage stream wrapper MediaFiles.'),
      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
  );

  return $wrappers;
}

/**
 * Implements hook_mediamosa_storage_info().
 */
function mediamosa_storage_mountpoint_mediamosa_storage_info() {
  return array(mediamosa_storage_mountpoint::NAME => array(
      'name' => t('Custom mountpoint storage'),
      'description' => t('The MediaMosa custom mountpoint storage.'),
  ));
}

/**
 * Implements hook_mediamosa_storage_profile_load().
 */
function mediamosa_storage_mountpoint_mediamosa_storage_profile_load($node) {
  $result = mediamosa_db::db_select(mediamosa_storage_mountpoint_db::TABLE_NAME, 'p')
    ->condition(mediamosa_storage_profile_db::ID, $node->{mediamosa_storage_profile_db::ID})
    ->fields('p')
    ->execute()
    ->fetchAssoc();

  $node->{mediamosa_storage_mountpoint_db::MOUNTPOINT} = $result[mediamosa_storage_mountpoint_db::MOUNTPOINT];
  $node->{mediamosa_storage_mountpoint_db::MOUNTPOINT_WINDOWS} = $result[mediamosa_storage_mountpoint_db::MOUNTPOINT_WINDOWS];

  return $node;
}

/**
 * Implements hook_mediamosa_storage_profile_insert().
 */
function mediamosa_storage_mountpoint_mediamosa_storage_profile_insert($node) {
  // Collect the data we want to insert.
  $fields = array();
  foreach (mediamosa_storage_mountpoint_db::get_fields() as $field) {
    if (isset($node->{$field})) {
      $fields[$field] = $node->{$field};
    }
  }

  mediamosa_db::db_insert(mediamosa_storage_mountpoint_db::TABLE_NAME)
    ->fields($fields)
    ->execute();

  //TODO: maybe do some other stuff before or after inserting?
}

/**
 * Implements hook_mediamosa_storage_profile_update().
 */
function mediamosa_storage_mountpoint_mediamosa_storage_profile_update($node) {
  // Collect the data we want to update.
  $fields = array();
  foreach (mediamosa_storage_mountpoint_db::get_fields() as $field) {
    if (isset($node->{$field})) {
      $fields[$field] = $node->{$field};
    }
  }

  mediamosa_db::db_update(mediamosa_storage_mountpoint_db::TABLE_NAME)
    ->fields($fields)
    ->condition(mediamosa_storage_profile_db::ID, $node->{mediamosa_storage_profile_db::ID})
    ->execute();

  //TODO: maybe do some other stuff before or after updating?
}

/**
 * Implements hook_mediamosa_storage_profile_delete().
 */
function mediamosa_storage_mountpoint_mediamosa_storage_profile_delete($node) {
  mediamosa_db::db_delete(mediamosa_storage_mountpoint_db::TABLE_NAME)
    ->condition(mediamosa_storage_profile_db::ID, $node->{mediamosa_storage_profile_db::ID})
    ->execute();

  //TODO: maybe do some other stuff before or after deleting?
}

/**
 * Implements hook_mediamosa_storage_profile_view().
 */
function mediamosa_storage_mountpoint_mediamosa_storage_profile_view($node, $view_mode = 'full') {
  $rows = array(
    array(t('Linux Mount Point'), check_plain($node->{mediamosa_storage_mountpoint_db::MOUNTPOINT})),
    array(t('Windows Mount Point'), check_plain($node->{mediamosa_storage_mountpoint_db::MOUNTPOINT_WINDOWS})),
  );

  return $rows;
}

/**
 * Implements hook_mediamosa_storage_profile_form().
 */
function mediamosa_storage_mountpoint_mediamosa_storage_profile_form($node, $form_state) {
  $form = array();

  $form[mediamosa_storage_mountpoint_db::MOUNTPOINT] = array(
    '#title' => t('Mountpoint'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#description' => t('The mountpoint.'),
    '#default_value' => mediamosa_node::default_value(mediamosa_storage_mountpoint_db::MOUNTPOINT, $node),
    '#maxlength' => mediamosa_storage_mountpoint_db::MOUNTPOINT_LENGTH,
  );

  $form[mediamosa_storage_mountpoint_db::MOUNTPOINT_WINDOWS] = array(
    '#title' => t('Windows Mountpoint'),
    '#type' => 'textfield',
    '#required' => FALSE,
    '#description' => t('The Windows mountpoint.'),
    '#default_value' => mediamosa_node::default_value(mediamosa_storage_mountpoint_db::MOUNTPOINT_WINDOWS, $node),
    '#maxlength' => mediamosa_storage_mountpoint_db::MOUNTPOINT_WINDOWS_LENGTH,
  );

  return $form;
}

/**
 * Implements hook_mediamosa_storage_profile_validate().
 */
function mediamosa_storage_mountpoint_mediamosa_storage_profile_validate($node, $form, $form_state) {
  $mountpoint = $node->{mediamosa_storage_mountpoint_db::MOUNTPOINT};
  if (!is_dir($mountpoint)) {
    form_set_error(mediamosa_storage_mountpoint_db::MOUNTPOINT, t('Invalid mountpoint, just must precreate the directory'));
  }
  elseif (!is_writable($mountpoint)) {
    form_set_error(mediamosa_storage_mountpoint_db::MOUNTPOINT, t('Mountpoint not writable'));
  }
  //TODO: validate windows mountpoint
}
